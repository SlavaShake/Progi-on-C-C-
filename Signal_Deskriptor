// CD-ROM.cpp: определяет точку входа для консольного приложения.
//

#include "stdafx.h"
#include <stdio.h>
#include <stdlib.h> 




#include <iostream> 
#include "windows.h"

int Get_Case(char symbol)
{
	if (symbol == 'a' || symbol == 'A') return 1;
	if (symbol == 'b' || symbol == 'B') return 2;
	if (symbol == 'c' || symbol == 'C') return 3;
	if (symbol == 'd' || symbol == 'D') return 4;
	if (symbol == 'e' || symbol == 'E') return 5;
	if (symbol == 'f' || symbol == 'F') return 6;
	if (symbol == 'g' || symbol == 'G') return 7;
	if (symbol == 'h' || symbol == 'H') return 8;
	if (symbol == 'i' || symbol == 'I') return 9;
	if (symbol == 'j' || symbol == 'J') return 10;
	if (symbol == 'k' || symbol == 'K') return 11;
	if (symbol == 'l' || symbol == 'L') return 12;
	if (symbol == 'm' || symbol == 'M') return 13;
	if (symbol == 'n' || symbol == 'N') return 14;
	if (symbol == 'o' || symbol == 'O') return 15;
	if (symbol == 'p' || symbol == 'P') return 16;
	if (symbol == 'q' || symbol == 'Q') return 17;
	if (symbol == 'r' || symbol == 'R') return 18;
	if (symbol == 's' || symbol == 'S') return 19;
	if (symbol == 't' || symbol == 'T') return 20;
	if (symbol == 'u' || symbol == 'U') return 21;
	if (symbol == 'v' || symbol == 'V') return 22;
	if (symbol == 'w' || symbol == 'W') return 23;
	if (symbol == 'x' || symbol == 'X') return 24;
	if (symbol == 'y' || symbol == 'Y') return 25;
	if (symbol == 'z' || symbol == 'Z') return 26;
	if (symbol == ' ') return 27;
	if (symbol == '1') return 28;
	if (symbol == '2') return 29;
	if (symbol == '3') return 30;
	if (symbol == '4') return 31;
	if (symbol == '5') return 32;
	if (symbol == '6') return 33;
	if (symbol == '7') return 34;
	if (symbol == '8') return 35;
	if (symbol == '9') return 36;
	if (symbol == '0') return 37;
	return -1;

}

void Case_Signal(int descriptor_signal)
{
	switch (descriptor_signal)
	{
		case 1:
		{
			system("echo  A");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 2:
		{
			system("echo  B");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 3:
		{
			system("echo  C");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 4:
		{
			system("echo  D");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 5:
		{
			system("echo  E");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 6:
		{
			system("echo  F");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 7:
		{
			system("echo  G");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 8:
		{
			system("echo  H");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 9:
		{
			system("echo  I");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 10:
		{
			system("echo  J");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 11:
		{
			system("echo  K");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 12:
		{
			system("echo  L");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 13:
		{
			system("echo  M");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 14:
		{
			system("echo  N");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 15:
		{
			system("echo  O");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 16:
		{
			system("echo  P");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 17:
		{
			system("echo  Q");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 18:
		{
			system("echo  R");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 19:
		{
			system("echo  S");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 20:
		{
			system("echo  T");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 21:
		{
			system("echo  U");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 22:
		{
			system("echo  V");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 23:
		{
			system("echo  W");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 24:
		{
			system("echo  X");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 25:
		{
			system("echo  Y");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 26:
		{
			system("echo  Z");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 27:
		{
			system("echo  _");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 28:
		{
			system("echo  1");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 29:
		{
			system("echo  2");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 30:
		{
			system("echo  3");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 31:
		{
			system("echo  4");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 32:
		{
			system("echo  5");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 33:
		{
			system("echo  6");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 34:
		{
			system("echo  7");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 35:
		{
			system("echo  8");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
			break;
		}
		case 36:
		{
			system("echo  9");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 0");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case 37:
		{
			system("echo  0");
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			system("eject -x 6");
			Sleep(600);
			system("eject -x 2");
			Sleep(600);
			break;
		}
		case -1:
		{
			system( "echo Unable symbol!!!!");
		}
		default:
			break;
	}

}

int main()
{

	printf("Put Massege:\n");
	char Massege[256];
	int i = 0;
	for ( i = 0; (Massege[i] = getchar()) != '\n'; i++);
	Massege[i] = '\0';
	i = 0;
	int k = 0;
	while (Massege[i]!='\0')
	{	
		k = Get_Case(Massege[i]);
		Case_Signal(k);
		i++;
	}
	getchar();
	return 0;
}


